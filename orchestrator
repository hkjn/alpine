#!/usr/bin/env bash

declare help="
Orchestrator Script for Alpine's docker images.

Usage:
  orchestrator push
  orchestrator build
  orchestrator -h | --help

Options:
  -h --help               Show this screen.

By default it will build all the available files on the versions/arch
directory.
"

declare ARCH
ARCH="$(uname -m)"
declare BUILDER_DIR="${BUILDER_DIR:-builder/$ARCH}"
declare BUILD_IMAGE="${BUILD_IMAGE:-alpine-builder-$ARCH}"
declare BUILD_PREFIX="${BUILD_PREFIX:-alpine-build-$ARCH-}"
declare OPTIONS="${OPTIONS:-versions/$ARCH/options}"

build() {
  echo "Building for architecture: $ARCH"
  declare build_files="${*:-$OPTIONS}"
  
  echo "Will build versions files: $build_files"

  echo "Building the builder image:"
  docker build -t "$BUILD_IMAGE" "$BUILDER_DIR"

  echo "Now, gonna build the resulting images:"
  for file in $build_files; do
    echo "Building from file: $file..."
    (
      source "$file"
      local version_dir
      version_dir="$(dirname "$file")"
      echo "The build options to use are '${BUILD_OPTIONS[@]}'"
      docker run --rm -e "TRACE=$TRACE" "$BUILD_IMAGE" "${BUILD_OPTIONS[@]}" > "./$version_dir/rootfs.tar.gz"
      echo "Done building rootfs.tar.gz"
      for tag in "${TAGS[@]}"; do
        echo "Doing docker build -t '$tag' '$version_dir'"
        docker build -t "$tag" "$version_dir"
      done
     )
   done
}

help() {
  echo "$help"
}

main() {
  set -eo pipefail; [[ "$TRACE" ]] && set -x
  declare cmd="$1"
  case "$cmd" in
    build)        shift; build "$@";;
    -h|--help)    shift; help "$@";;
    *)            help "$@";;
  esac
}

main "$@"
