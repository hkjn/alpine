#!/usr/bin/env bash

TRACE=${TRACE:-""}
set -euo pipefail; [[ "$TRACE" ]] && set -x

declare ARCH="$(uname -m)"
declare BUILDER_DIR="${BUILDER_DIR:-builder/$ARCH}"
declare BUILD_IMAGE="${BUILD_IMAGE:-alpine-builder-$ARCH}"
declare BUILD_PREFIX="${BUILD_PREFIX:-alpine-build-$ARCH-}"
declare OPTIONS="${OPTIONS:-versions/$ARCH/options}"
declare NO_PUSH="${NO_PUSH:-}"

build() {
  echo "Building for architecture: $ARCH"
  declare build_files="${*:-$OPTIONS}"

  echo "Will build versions files: $build_files"

  echo "Building the builder image:"
  docker build -t "$BUILD_IMAGE" "$BUILDER_DIR"

  echo "Now, gonna build the resulting images:"
  for file in $build_files; do
    echo "Building from file: $file..."
    source "$file"
    local version_dir
    version_dir="$(dirname "$file")"
    echo "The build options are '${BUILD_OPTIONS[@]}'"
    docker run --rm -e "TRACE=$TRACE" "$BUILD_IMAGE" "${BUILD_OPTIONS[@]}" > "./$version_dir/rootfs.tar.gz"
    echo "Done building rootfs.tar.gz"
    for tag in "${TAGS[@]}"; do
      echo "Doing docker build -t '$tag' '$version_dir'"
      docker build -t "$tag" "$version_dir"
    done
   done
}

push() {
  [[ "$NO_PUSH" ]] && return
  declare build_files="${*:-$OPTIONS}"

  echo "Will push versions files: $build_files"
  for file in $build_files; do
    source "$file"
    for tag in "${TAGS[@]}"; do
      echo "Doing docker push '$tag'"
      docker push $tag
    done
  done
}

build "$@"
push "$@"
